<?php

/**
 * @file
 * Code for the REPS core feature.
 */

include_once 'reps_core.features.field_base.inc';
include_once 'reps_core.features.inc';
include_once 'reps_core.api.inc';

/**
 * Implements hook_help().
 */
function reps_core_help($path, $arg) {
  $help = '';
  switch ($path) {
    // Help text for the reps_core feature.
    case 'admin/help#reps_core':
      $help = '<p></p>';
      break;
  }

  return $help;
}

/**
 * Implements hook_node_view().
 */
function reps_core_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'reps_news':
      menu_tree_set_path('main-menu', drupal_lookup_path('source', 'news'));
      break;

    case 'reps_event':
      menu_tree_set_path('main-menu', drupal_lookup_path('source', 'events'));
      break;

    case 'reps_publication':
      menu_tree_set_path('main-menu', drupal_lookup_path('source', 'publications'));
      break;

    case 'reps_video':
      menu_tree_set_path('videos');
      break;
  }
}

/**
 * Implements hook_menu_alter().
 */
function reps_core_menu_alter(&$items) {
  $items['node/%node/edit']['theme callback'] = '_reps_core_use_admin_theme';

  foreach (node_type_get_types() as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['node/add/' . $type_url_str]['theme callback'] = '_reps_core_use_admin_theme';
  }
}

/**
 * Callback to set the admin theme for node operations.
 *
 * @return string
 *   admin theme variable
 */
function reps_core_use_admin_theme() {
  return variable_get('admin_theme', 'seven');
}

/**
 * Empty Callback for the home page.
 */
function reps_core_empty() {
  return '';
}

/**
 * Create default pages.
 */
function _reps_core_create_default_pages() {

  $pages[] = array(
    'title' => t('About us'),
    'path' => 'about-us',
    'type' => 'page',
  );

  $pages[] = array(
    'title' => t('services'),
    'path' => 'services',
    'type' => 'page',
  );

  $pages[] = array(
    'title' => t('Business and funding'),
    'path' => 'business-funding',
    'type' => 'page',
  );

  $pages[] = array(
    'title' => t('Education'),
    'path' => 'education',
    'type' => 'page',
  );

  foreach ($pages as $page) {
    if ($page['path'] !== 'home') {
      $nids[] = _reps_core_create_node($page['type'], $page['title'], $page['path']);
    }
  }
  variable_set('reps_core_default_pages_nids', $nids);

  $page = array(
    'title' => t('Homepage'),
    'path' => 'home',
    'type' => 'reps_homepage',
  );
  _reps_core_create_node($page['type'], $page['title'], $page['path']);
  variable_set('site_frontpage', 'home');
}

/**
 * Implements hook_date_format_types().
 */
function reps_core_date_format_types() {
  return array(
    'event_date_format' => t('Event date format'),
    'just_Y' => t('Just year'),
    'short_de_' => t('Event date format (de)'),
    'time' => t('Time format'),
    'time_bg' => t('Time format (bg)'),
  );
}

/**
 * Save site name translations.
 *
 * @param string $lang
 *   Lang code.
 * @param array $vars
 *   Array containing variables name and values.
 */
function _reps_core_site_name($lang, array $vars) {
  foreach ($vars as $variable => $value) {
    $results = db_select('variable_store')
      ->fields(NULL, array('field'))
      ->condition('name', $variable, '=')
      ->condition('realm_key', $lang, '=')
      ->countQuery()
      ->execute()
      ->fetchField();

    if ($results == 0) {
      db_insert('variable_store')
        ->fields(array(
          'realm' => 'language',
          'realm_key' => $lang,
          'name' => $variable,
          'value' => $value,
          'serialized' => 0,
        ))
        ->execute();
    }
    else {
      db_update('variable_store')
        ->fields(array('value' => $value))
        ->condition('name', $variable, '=')
        ->condition('realm_key', $lang, '=')
        ->execute();
    }
  }
}

/**
 * This is used instead of features_override with the same goal.
 *
 * We have to override some configurations based on features belonging to the
 * multisite platform, since we cannot do properly updating those features,
 * we had to find a way to override them not using the features_override module.
 */
function _reps_core_overrides() {
  // Page instances of field body.
  $instances = field_read_instance('node', 'body', 'page');
  if ($instances) {
    $instances['display']['default'] = array(
      'label' => 'hidden',
      'module' => 'text',
      'settings' => array(),
      'type' => 'text_default',
      'weight' => 1,
    );

    $instances['display']['full'] = array(
      'label' => 'hidden',
      'module' => 'text',
      'settings' => array(),
      'type' => 'text_default',
      'weight' => '0',
    );

    $instances['display']['teaser'] = array(
      'label' => 'hidden',
      'module' => 'smart_trim',
      'settings' => array(
        'more_link' => '1',
        'more_text' => 'Read more',
        'summary_handler' => 'full',
        'trim_length' => '30',
        'trim_options' => array(
          'text' => 'text',
        ),
        'trim_suffix' => '...',
        'trim_type' => 'words',
      ),
      'type' => 'smart_trim_format',
      'weight' => '0',
    );
    field_update_instance($instances);
  }

  // Enable translations for various fields.
  $field_names = array(
    'body',
  );

  foreach ($field_names as $field_name) {
    $field = field_read_field($field_name);
    if ($field) {
      // Make the field translatable.
      $field['translatable'] = 1;
      field_update_field($field);
    }
  }

  // Override default values from CCE basic conflicts.
  variable_set('node_admin_theme', '1');
  variable_set('locale_field_language_fallback', '0');
}

/**
 * Implements hook_block_info().
 */
function reps_core_block_info() {
  $blocks = array();
  $blocks['reps_core_feedback_form']['info'] = t('Help us to improve');
  $blocks['reps_core_share_webtools']['info'] = t('Webtools share button');
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function reps_core_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'reps_core_feedback_form':
      $block['subject'] = t('Help us to improve');
      $block['content'] = drupal_get_form('_reps_core_feedback_form');
      break;

    case 'reps_core_share_webtools':
      $block['subject'] = t('Webtools Share');
      $block['content'] = t('Webtools Share');
      break;
  }
  return $block;
}

/**
 * Prepare the feedback form.
 */
function _reps_core_feedback_form() {
  $form['#action'] = url('https://webtools.ec.europa.eu/form-tools/process.php', array('external' => TRUE));

  $form['reps_core_feeback_form']['form-found'] = array(
    '#attributes' => array('id' => 'form-found'),
    '#type' => 'radios',
    '#required' => TRUE,
    '#title' => t('Find what you wanted?'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
  );

  $form['reps_core_feeback_form']['form-what'] = array(
    '#attributes' => array('id' => 'form-what'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('What were you looking for?'),
  );

  $form['reps_core_feeback_form']['form-suggestion'] = array(
    '#attributes' => array('id' => 'form-suggestion'),
    '#type' => 'textfield',
    '#required' => FALSE,
    '#title' => t('Any suggestions?'),
  );

  $form['reps_core_feeback_form']['form_tools_form_id'] = array(
    '#attributes' => array('id' => 'form_tools_form_id'),
    '#type' => 'hidden',
    '#default_value' => variable_get('reps_core_feedback_form_id', NULL),
  );

  $form['actions']['submit'] = array(
    '#type' => 'button',
    '#value' => t('Send'),
  );

  return $form;
}

/**
 * Check if the menu exists, otherwise create it.
 *
 * @param string $menu
 *   Menu machine name.
 */
function _reps_core_check_reps_menus($menu) {
  $check = menu_load($menu);

  if (!$check) {
    $menu = array(
      'menu_name' => $menu,
      'description' => '',
      'title' => $menu,
    );
    menu_save($menu);
  }
}

/**
 * Check if the content type exists, otherwise create it.
 *
 * @param string $ct
 *   Content type machine name.
 */
function _reps_core_check_reps_content_type($ct) {
  $type = node_type_get_type($ct);

  if (!$type) {
    $type = array(
      'type' => $ct,
      'name' => $ct,
      'base' => 'node_content',
      'description' => '',
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );

    $type = node_type_set_defaults($type);
    node_type_save($type);
    $type = node_type_get_type($ct);
  }

  return $type->type;
}

/**
 * Implements hook_post_features_enable_feature().
 */
function reps_core_post_features_enable_feature($component) {
  switch ($component) {
    case 'field_base':
      // Revert the field component, it seems it is not ready
      // after it's enabled.
      features_revert(array('reps_core' => array($component)));
      break;

    case 'menu_custom':
      _reps_core_check_reps_menus('menu-reps-services');
      break;
  }
}

/**
 * Helper function to create "fake" isntances of exported field bases.
 *
 * @param string $component
 *   Feature component name.
 */
function _reps_core_create_instances($component) {
  // Create a content type if it doesn't exist already.
  if ($component == 'field_base') {
    $type_name = 'reps_core_fs';
    $type = node_type_load($type_name);
    if (!$type) {
      $type = array(
        'type' => $type_name,
        'name' => t('Field instances'),
        'base' => 'node_content',
        'description' => t('Instantiate fields'),
        'custom' => 1,
        'modified' => 1,
        'locked' => 0,
        'disabled' => 1,
      );

      $type = node_type_set_defaults($type);
      node_type_save($type);
    }

    // Get fields from the features file.
    $fields = call_user_func_array('reps_core_field_default_field_bases', array(''));

    // Loop through the fields and build "fake" instances.
    foreach ($fields as $field_name => $field_options) {
      $exist = field_info_instance('node', $field_name, $type->type);
      // Only work with unlocked fields and check for existing instances.
      if ($field_options['locked'] == 0 && $exist === NULL) {
        $instance = array(
          'field_name' => $field_name,
          'entity_type' => 'node',
          'bundle' => $type->type,
          'label' => 'default instance',
          'description' => t('A default instance'),
          'required' => 0,
        );
        field_create_instance($instance);
      }
    }
  }
}

/**
 * Implements hook_filter_info().
 */
function reps_core_filter_info() {
  $filters['filter_basepath'] = array(
    'title' => t('Base path'),
    'description' => t('Use it to transform the leading slash of a link with the drupal base_path()'),
    'process callback' => '_reps_core_filter_basepath',
  );

  return $filters;
}

/**
 * Filter callback.
 */
function _reps_core_filter_basepath($text, $filter, $format, $langcode, $cache, $cache_id) {
  // Add the base path to leading slash links.
  $link = 'href="/';
  $img = 'src="/';
  $text = str_replace($link, drupal_substr($link, 0, -1) . base_path(), $text);
  $text = str_replace($img, drupal_substr($img, 0, -1) . base_path(), $text);

  return $text;
}

/**
 * Implements hook_filter_default_formats().
 */
function reps_core_full_html() {
  $format = filter_format_load('full_html');
  $format->filters = array(
    'filter_url' => array(
      'weight' => '0',
      'status' => '1',
      'settings' => array(
        'filter_url_length' => '120',
      ),
    ),
    'filter_autop' => array(
      'weight' => '1',
      'status' => '1',
      'settings' => array(),
    ),
    'media_filter' => array(
      'weight' => '2',
      'status' => '1',
      'settings' => array(),
    ),
    'filter_htmlcorrector' => array(
      'weight' => '10',
      'status' => '1',
      'settings' => array(),
    ),
    'filter_basepath' => array(
      'status' => '1',
    ),
  );

  filter_format_save((object) $format);
}

/**
 * Delete the default pages.
 */
function _reps_core_delete_defaults() {
  $nids = variable_get('reps_core_default_pages_nids');
  if (is_array($nids)) {
    foreach ($nids as $nid) {
      node_delete($nid);
    }
  }
}

/**
 * Implements hook_social_media_links_platform_info_alter().
 */
function reps_core_social_media_links_platform_info_alter(&$platforms) {
  // Add additional platform(s).
  $platforms['flickr'] = array(
    'title' => t('Flickr'),
    'base url' => 'https://www.flickr.com/',
  );
  // Add additional platform(s).
  $platforms['instagram'] = array(
    'title' => t('Instagram'),
    'base url' => 'https://www.instagram.com/',
  );
  // Add additional platform(s).
  $platforms['blog'] = array(
    'title' => t('Blog'),
    'base url' => '',
  );
  // Clean base urls.
  foreach ($platforms as $service => $values) {
    $platforms[$service]['base url'] = '';
  }
}

/**
 * Get the existing instances of fields.
 *
 * @param string $field_name
 *   Select or topic for the moment.
 *
 * @return array
 *   instances
 */
function _reps_core_get_instances($field_name) {
  // Get instances per field.
  $instances = array();
  if ($field_name) {
    $content_types = node_type_get_types();
    $instances = array();
    // We loop through the list of content types to find all the instances.
    foreach ($content_types as $machine_name => $content_type) {
      $exist = field_info_instance('node', $field_name, $machine_name);
      if ($exist !== NULL) {
        $instances[] = $exist['bundle'];
      }
    }
  }
  return $instances;
}

/**
 * Create a bean block for Laco.
 */
function _reps_core_create_block_laco() {
  drupal_flush_all_caches();
  features_revert_module("nexteuropa_webtools");

  $bean = bean_create(array('type' => 'webtools'));
  $bean->label = t('Reps - laco');
  $bean->title = '';
  $bean->delta = 'bean-laco';
  $bean->field_json_object = [
    LANGUAGE_NONE => [
      0 => [
        'value' => '{
          "service" : "laco",
          "include" : "#layout-body .region-content, #sidebar-right .region-sidebar-right",
          "exclude" : ".lang-available, .view-reps-homepage-additional-blocks",
          "coverage" : {
              "document" : "other",
              "page" : "other"
          },
          "icon" : "all"
        }',
      ],
    ],
  ];
  $bean->save();
}

/**
 * Create a bean block for Laco.
 */
function _reps_core_create_block_share() {
  drupal_flush_all_caches();
  features_revert_module("nexteuropa_webtools");

  $bean = bean_create(array('type' => 'webtools'));
  $bean->label = t('Reps - Share');
  $bean->title = '';
  $bean->delta = 'bean-share';
  $bean->field_json_object = [
    LANGUAGE_NONE => [
      0 => [
        'value' => '{
          "service" : "sbkm"
        }',
      ],
    ],
  ];
  $bean->save();
}

/**
 * Create a bean block for Twitter.
 */
function _reps_core_create_block_twitter() {
  // Get existing variable for screen name and count.
  if (variable_get('reps_core_twitter_webtools_config_screen')) {
    $screen_name = variable_get('reps_core_twitter_webtools_config_screen');
    $count = variable_get('reps_core_twitter_webtools_config_nbr');
  }
  elseif (variable_get('twitter_webtools_config_screen')) {
    $screen_name = variable_get('twitter_webtools_config_screen');
    $count = variable_get('twitter_webtools_config_nbr');
  }
  else {
    $screen_name = 'EU_Commission';
    $count = 3;
  }

  drupal_flush_all_caches();
  features_revert_module("nexteuropa_webtools");

  $bean = bean_create(array('type' => 'webtools'));
  $bean->label = t('Reps - twitter');
  $bean->title = '';
  $bean->delta = 'bean-twitter';
  $bean->field_json_object = [
    LANGUAGE_NONE => [
      0 => [
        'value' => '{
          "service": "smk",
          "type": "user",
          "display_user": true,
          "display_user_pic": true,
          "auto_expand_photo": false,
          "auto_expand_video": false,
          "screen_name": "' . $screen_name . '",
          "count": ' . $count . ',
          "include_rts": false,
          "rts_display_original": false,
          "exclude_replies": true,
          "tweet_more_btn": true
        }',
      ],
    ],
  ];
  $bean->save();
}

/**
 * Implements hook_field_widget_form_alter().
 */
function reps_core_field_widget_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#bundle']) and $element['#bundle'] == 'image') {
    // Make alt, title and caption required.
    if (in_array($element['#field_name'], array(
      'field_file_image_title_text',
      'field_file_image_alt_text',
    ))) {
      $element['value']['#required'] = TRUE;
    }
    if ($element['#field_name'] == 'field_caption') {
      // Set default value for caption.
      $element['value']['#default_value'] = 'copyright';
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function reps_core_entity_view_alter(&$build, $type) {
  if ($type == 'file') {
    if (isset($build['field_tags'])) {
      unset($build['field_tags']);
    }
    if (isset($build['field_folder'])) {
      unset($build['field_folder']);
    }
  }
}

/**
 * Implements hook_strongarm_alter().
 */
function reps_core_strongarm_alter($items) {
  if (!empty($items['media_wysiwyg_wysiwyg_browser_plugins'])) {
    // Prevent platform override.
    $value = array(
      0 => 'upload',
      1 => 'media_browser_plus--media_browser_thumbnails',
      2 => 'media_browser_plus--media_browser_my_files',
      3 => 'media_internet',
    );
    $items['media_wysiwyg_wysiwyg_browser_plugins']->value = $value;
  }
}

/**
 * Implements hook_views_default_views_alter().
 */
function reps_core_views_default_views_alter(&$views) {
  if (isset($views['media_browser_plus'])) {
    // Set the correct titles here.
    $views['media_browser_plus']->display['media_browser_thumbnails']->display_options['title'] = t('Library');
    $views['media_browser_plus']->display['media_browser_my_files']->display_options['title'] = t('My files');
  }
}

/**
 * Implements template_preprocess_views_view().
 */
function reps_core_preprocess_views_view(&$vars) {
  if ($vars['name'] == 'reps_contact_points') {
    $vars['rows'] = str_replace('KML ', '', $vars['rows']);
  }
}

/**
 * Alter the default filter options for the Sanitize HTML text filter.
 */
function reps_core_multisite_drupal_toolbox_filter_options_alter(&$filter_options) {
  $filter_options['valid_elements']['iframe'] = array('*' => TRUE);
}

/**
 * Implements hook_ds_field_theme_functions_info().
 */
function reps_core_ds_field_theme_functions_info() {
  return [
    /* @see _ef_pleco_ds_field_items_comma() */
    '_reps_core_ds_field_items_comma' => 'Reps - separated by comma',
    '_reps_core_ds_field_external_url' => 'Reps - external url',
  ];
}

/**
 * Add coma separator between multiple values.
 *
 * @param array $variables
 *   Variables.
 *
 * @return string
 *   html
 *
 * @see theme_ds_field_minimal()
 */
function _reps_core_ds_field_items_comma(array $variables) {
  $config = $variables['ds-config'];

  // Render the items.
  $items_html_parts = [];
  foreach ($variables['items'] as $item) {
    $item_html = drupal_render($item);
    $items_html_parts[] = $item_html;
  }

  $output = implode(', ', $items_html_parts);

  // Add a label, if applicable.
  if (!$variables['label_hidden']) {
    $label_html = $variables['label'];

    if (!isset($config['lb-col'])) {
      $label_html .= ':&nbsp;';
      $label_tag = $variables['element']['#label_display'] == 'inline' ? 'span' : 'div';
    }
    $label_html = '<' . $label_tag . '><strong>' . $label_html . '</strong></' . $label_tag . '>';

    // Prepend the label to the output.
    $output = $label_html . '<' . $label_tag . ' >' . $output . '</' . $label_tag . '>';
  }

  // Add an outer wrapper.
  $classes = 'field field-name-' . str_replace('_', '-', $variables['element']['#field_name']);

  if (isset($config['classes'])) {
    $classes .= ' ' . $config['classes'];
  }

  return '<div class="' . check_plain($classes) . '">' . $output . '</div>';
}

/**
 * Add target _blank on external links.
 *
 * @param array $variables
 *   Variable.
 *
 * @return string
 *   html.
 *
 * @see theme_ds_field_external_url()
 */
function _reps_core_ds_field_external_url(array $variables) {
  global $language;

  $node = $variables['element']['#object'];
  $markup = $variables['element'][0]['#markup'];
  $classes = $variables['classes'];
  $lg = $language->language;
  $regExp = '/<a href=\"([^\"]*)\">/iU';

  if (!empty($node->field_reps_core_external_url[$lg])) {
    $link = $node->field_reps_core_external_url[$lg][0]['display_url'];
    $replace = '<a href="' . $link . '" target="_blank">';
    $markup = preg_replace($regExp, $replace, $markup);
  }

  return '<div class="' . check_plain($classes) . '">' . $markup . '</div>';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reps_core_form_page_node_form_alter(&$form, &$form_state, $form_id) {
   if (!isset($form['field_ne_body'])) {
     $form['body']['#weight'] = -2;
   }
}

/*
 * Implements hook_menu_local_tasks_alter().
 */
function reps_core_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if(!empty($root_path) && $root_path == 'admin/content/file/list'){
    $item = menu_get_item('file/add'); 
    if ($item['access']) {       
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }  
  }  
}
