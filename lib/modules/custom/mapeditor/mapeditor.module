<?php

/**
 * @file
 * Provides functionality for the Mapeditor module.
 */

module_load_include('inc', 'mapeditor', 'mapeditor.formatters');
module_load_include('inc', 'mapeditor', 'mapeditor.theme');
module_load_include('inc', 'mapeditor', 'mapeditor.forms');
module_load_include('inc', 'mapeditor', 'mapeditor.build');
module_load_include('inc', 'mapeditor', 'mapeditor.data');

define('MAPEDITOR_WEBTOOLS_ENVIRONMENT', '//europa.eu/webtools/load.js');

include_once 'mapeditor.features.inc';

/**
 * Implements hook_menu().
 */
function mapeditor_menu() {
  $items['mapeditor/example'] = array(
    'title' => 'Example Page',
    'page callback' => '_mapeditor_example_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'mapeditor.pages.inc',
  );

  $items['mapeditor/example/nuts'] = array(
    'title' => 'NUTS example Page',
    'page callback' => '_mapeditor_example_page_nuts',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'mapeditor.pages.inc',
  );

  $items['mapeditor/example/more'] = array(
    'title' => 'Example Page',
    'page callback' => '_mapeditor_example_page_more',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'mapeditor.pages.inc',
  );

  $items['admin/config/system/mapeditor'] = array(
    'title' => 'Mapeditor',
    'description' => 'Configuration for Mapeditor',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'weight' => '0',
  );

  $items['admin/config/system/mapeditor/settings'] = array(
    'title' => 'Mapeditor settings',
    'description' => 'Settings for Mapeditor',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mapeditor_settings'),
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/system/mapeditor/settings'] = array(
    'title' => 'Mapeditor settings',
    'description' => 'Settings for Mapeditor',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mapeditor_settings'),
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/mapeditor/default_center'] = array(
    'page callback' => '_mapeditor_default_center',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Adds a pop up view mode for each entity.
 */
function mapeditor_entity_info_alter(&$entity_info) {

  // @todo consider theme function instead of view mode.
  $entity_info['node']['view modes']['popup'] = array(
    'label' => t('Pop up'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Cleans up the node edit form.
 */
function mapeditor_form_mapeditor_map_node_form_alter(&$form, &$form_state, $form_id) {
  // Gets default map definitions for new node.
  $map_definition = _mapeditor_form_value_defaults();

  // Fetches map definition from existing node.
  if (isset($form_state['node'])) {
    $wrnode = entity_metadata_wrapper('node', $form_state['node']);
    if (_mapeditor_fieldcheck('mapeditor_map_definition', $wrnode)) {
      $map_definition = $wrnode->mapeditor_map_definition->value();
      $map_definition = drupal_json_decode($map_definition);
    }
  }
  $form['data_type'] = array(
    '#type' => 'radios',
    '#title' => t('Data type'),
    '#options' => array(
      'geofield' => 'Latitude and longitude',
      'nuts' => 'NUTS regions',
    ),
    '#default_value' => isset($map_definition['data_type']) ? $map_definition['data_type'] : 'geofield',
    '#weight' => 1,
  );
  $form['source_data'] = array(
    '#type' => 'radios',
    '#title' => t('Map data'),
    '#options' => array(
      'entities' => 'Data from website content (nodes)',
      'csv' => 'Data from CSV field',
    ),
    '#default_value' => isset($map_definition['source_data']) ? $map_definition['source_data'] : 'entities',
    '#weight' => 2,
  );

  // Defines content type filter fields based on chosen content types in admin
  // UI.
  $options = array('0' => t('- Select -'));
  $content_types = variable_get('mapeditor_node_types', array());
  $all_content_types = node_type_get_names();
  foreach ($content_types as $content_type) {
    if (array_key_exists($content_type, $all_content_types)) {
      $options[$content_type] = $all_content_types[$content_type];
    }
  }
  $form['mapeditor_content_type'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('Content type'),
    '#description' => t('Content type where to find the data'),
    '#states' => array(
      'visible' => array(
        ':input[name="source_data"]' => array('value' => 'entities'),
      ),
    ),
    '#default_value' => isset($map_definition['mapeditor_content_type']) ? $map_definition['mapeditor_content_type'] : 0,
    '#weight' => 3,
  );

  // Defines term filter fields based on chosen vocabularies in admin UI.
  $mapeditor_vocabularies = variable_get('mapeditor_vocabularies', array());
  foreach ($mapeditor_vocabularies as $mapeditor_vocabulary) {
    if ($mapeditor_vocabulary) {
      $vocabulary = taxonomy_vocabulary_machine_name_load($mapeditor_vocabulary);
      $options = array(0 => t('- Select -')) + _mapeditor_get_taxonomy_term_options($mapeditor_vocabulary);
      $form[$mapeditor_vocabulary] = array(
        '#type' => 'select',
        '#options' => $options,
        '#title' => $vocabulary->name,
        '#multiple' => TRUE,
        '#description' => t('Filter results by @vocab', array('@vocab' => $vocabulary->name)),
        '#default_value' => isset($map_definition['term_filter'][$mapeditor_vocabulary]) ? $map_definition['term_filter'][$mapeditor_vocabulary] : 0,
        '#weight' => 4,
      );
    }
  }

  // Customizes the field_ui mapeditor_csv_data field.
  $form['mapeditor_csv_data']['#states'] = array(
    'visible' => array(
      ':input[name="source_data"]' => array('value' => 'csv'),
    ),
  );
  $form['mapeditor_csv_data']['#weight'] = 3;
  $url = file_create_url(drupal_get_path('module', 'mapeditor') . '/template-csv-entry-nodes.txt');
  $nuts_url = file_create_url(drupal_get_path('module', 'mapeditor') . '/template-csv-entry-nuts.txt');
  $form['mapeditor_csv_data'][LANGUAGE_NONE][0]['value']['#description'] .= ' ' . t('Download a <a href="!url">template with CSV data for nodes</a> or a <a href="!nuts_url">template with CSV data for NUTS</a>', array(
      '!url' => $url,
      '!nuts_url' => $nuts_url,
    ));

  $form['height'] = _mapeditor_form_elements('height', $map_definition);
  $form['center'] = _mapeditor_form_elements('center', $map_definition);
  $form['popup'] = _mapeditor_form_elements('popup', $map_definition);

  // Defines & validates the zoom fields.
  $form['zoom'] = _mapeditor_form_elements('zoom', $map_definition);
  // @todo. figure out if this is broken.
  $form['#validate'][] = '_mapeditor_validate_zoom';

  // Defines the icon field.
  $form['icon'] = _mapeditor_form_elements('icon', $map_definition);

  // Defines the tile layer (background map images).
  $form['tile_layer'] = _mapeditor_form_elements('tile_layer', $map_definition);

  // Defines the attribution (credits).
  $form['attribution'] = _mapeditor_form_elements('attribution', $map_definition);

  // Customizes the field_ui body field.
  $form['body']['en'][0]['summary']['#access'] = FALSE;
  $form['body']['#group'] = 'additional_settings';
  $form['body']['#after_build'][] = '_mapeditor_remove_tips';
  $form['additional_settings'] = array(
    '#type' => 'vertical_tabs',
    '#weight' => 99,
  );
  $form['show_map_definition'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show map definition'),
    '#default_value' => isset($map_definition['show_map_definition']) ? $map_definition['show_map_definition'] : 1,
    '#weight' => 98,
  );

  // @todo put them all together in a group.
  $form['mapeditor_map_definition']['#states'] = array(
    'visible' => array(
      ':input[name="show_map_definition"]' => array('checked' => TRUE),
    ),
  );
  $form['mapeditor_map_definition']['#weight'] = 99;

  // Calls additional callback to save field values in definition field.
  $form['actions']['submit']['#submit'][] = '_mapeditor_map_node_form_submit';
}

/**
 * Stores form field values in the field ui map definition field.
 */
function _mapeditor_map_node_form_submit($form, &$form_state) {

  // Fetches field values from form state.
  $map_definition = array(
    'popup' => array(
      'show' => $form_state['values']['show'],
      'popin' => $form_state['values']['popin'],
    ),
    'icon' => array(
      'icon' => $form_state['values']['icon'],
    ),
    'tile_layer' => array(
      'tile_layer' => $form_state['values']['tile_layer'],
    ),
    'height' => array(
      'height' => $form_state['values']['height'],
    ),
    'center' => array(
      'lat' => $form_state['values']['lat'],
      'lon' => $form_state['values']['lon'],
    ),
    'zoom' => array(
      'initialZoom' => $form_state['values']['initialZoom'],
      'minZoom' => $form_state['values']['minZoom'],
      'maxZoom' => $form_state['values']['maxZoom'],
    ),
    'attribution' => array(
      'attributionControl' => $form_state['values']['attributionControl'],
      'attribution' => $form_state['values']['attribution'],
    ),
    'source_data' => $form_state['values']['source_data'],
    'data_type' => $form_state['values']['data_type'],
    'show_map_definition' => $form_state['values']['show_map_definition'],
    'mapeditor_content_type' => $form_state['values']['mapeditor_content_type'],
  );

  // Fetches values from term filters (depend on selected vocabularies).
  $mapeditor_vocabularies = variable_get('mapeditor_vocabularies', array());
  foreach ($mapeditor_vocabularies as $mapeditor_vocabulary) {
    if ($mapeditor_vocabulary) {
      // Remove empty lists.
      $vocabulary_filters = $form_state['values'][$mapeditor_vocabulary];
      $zero = array_search(0, $vocabulary_filters);
      unset($vocabulary_filters[$zero]);
      if (count($vocabulary_filters) > 0) {
        $map_definition['term_filter'][$mapeditor_vocabulary] = $vocabulary_filters;
      }
    }
  }

  // Stores form field values in the field ui map definition field.
  $map_definition = json_encode($map_definition);
  if (isset($form_state['node'])) {
    $wrnode = entity_metadata_wrapper('node', $form_state['node']);
    $wrnode->mapeditor_map_definition->set($map_definition);
    $wrnode->save();
  }
}

/**
 * Removes tips from body field.
 */
function _mapeditor_remove_tips(&$form) {
  $form[LANGUAGE_NONE][0]['format']['guidelines']['#access'] = FALSE;
  return $form;
}

/**
 * Implements hook_field_extra_fields().
 *
 * Defines the map on the map node type as a pseudo field,
 * allowing it to be displayed, ordered or hidden via the UI.
 */
function mapeditor_field_extra_fields() {
  $extra = array();
  $extra['node']['mapeditor_map']['display']['map'] = array(
    'label' => t('Map'),
    'weight' => 5,
  );
  return $extra;
}

/**
 * Implements hook_entity_view().
 *
 * Defines the content of the map and nuts map pseudo fields.
 */
function mapeditor_node_view($node, $view_mode, $langcode) {
  $extrafields = field_extra_fields_get_display('node', $node->type, $view_mode);

  // Checks if the map field exists and then adds it to the node view.
  if (isset($extrafields['map']) && isset($extrafields['map']['visible']) && $extrafields['map']['visible']) {
    $node->content['map'] = _mapeditor_show_map($node);
  }
}

/**
 * Provides the render array that contains the map.
 *
 * The map is a view with custom filters. Based on the content of a map node.
 *
 * @todo improve readability.
 */
function _mapeditor_show_map($node) {
  $build = array();

  // Loads map node.
  $wrnode = entity_metadata_wrapper('node', $node);
  $map_definition = _mapeditor_map_definition($wrnode);
  $map = $map_definition['map'];
  $settings = $map_definition['settings'];

  // Builds map with nuts data from csv input field.
  if ($settings['source_data'] == 'csv' && $settings['data_type'] == 'nuts') {
    if (_mapeditor_fieldcheck('mapeditor_csv_data', $wrnode)) {

      // Prepares data for build.
      $mapeditor_data = new MapeditorMapData();
      $mapeditor_data->setNuts($wrnode->mapeditor_csv_data->value(), $settings['source_data']);
      $nuts = $mapeditor_data->getNuts();

      // Builds the map.
      $mapeditor_map = new MapeditorMapBuild($map, $settings);
      $mapeditor_map->setCustomJs('nuts.js');
      $mapeditor_map->setNuts($nuts);
      return $mapeditor_map->build;
    }

    else {
      drupal_set_message('Not enough information to build map.', 'error');
    }
  }

  // Builds map with geo data (lat & lon) from csv input field.
  elseif ($settings['source_data'] == 'csv' && $settings['data_type'] == 'geofield') {
    if (_mapeditor_fieldcheck('mapeditor_csv_data', $wrnode)) {
      $lines = explode("\n", $wrnode->mapeditor_csv_data->value());
      $csv_data = array();
      foreach ($lines as $line) {
        if (isset($line[0])) {
          $csv_data[] = str_getcsv($line);
        }
      }
      foreach ($csv_data as $item) {
        $lat = $item[0];
        $lon = $item[1];
        $name = check_plain($item[2]);
        $description = check_plain($item[3]);
        $url = $item[4];
        $features[] = array(
          'type' => 'Feature',
          'properties' => array(
            'name' => $name,
            'popupContent' => theme('popup', array(
              'title' => $name,
              'description' => $description,
              'url' => $url,
            )),
          ),
          'geometry' => array(
            'type' => 'Point',
            'coordinates' => array(
              round($lon, 4),
              round($lat, 4),
            ),
          ),
        );
        // Collects all coordinates (lat, lon) for the fitBounds method.
        $all_coordinates[] = array(
          round($lat, 4),
          round($lon, 4),
        );
      }
      $settings['all_coordinates'] = $all_coordinates;

      // Builds the map.
      $mapeditor_map = new MapeditorMapBuild($map, $settings);
      $mapeditor_map->setCustomJs('map.js');
      $mapeditor_map->setFeatures($features);
      return $mapeditor_map->build;
    }
    else {
      drupal_set_message('Not enough information to build map.', 'error');
    }
  }

  // Builds map with data (NUTS or geofield) from nodes.
  elseif ($settings['source_data'] == 'entities') {
    $filters = array();
    $filters['bundle'] = $settings['mapeditor_content_type'];

    // Finds taxonomy fields in the mapeditor_content_type so that they can be
    // use as filters in the query.
    $content_type_fields = field_read_instances(array('bundle' => $settings['mapeditor_content_type']));
    foreach ($content_type_fields as $content_type_field) {
      $field_info = field_info_field($content_type_field['field_name']);
      switch ($field_info['type']) {
        case 'taxonomy_term_reference':
          $vocabulary = $field_info['settings']['allowed_values'][0]['vocabulary'];

          // Finds the term fields in the mapeditor_content_type that be used
          // as filters.
          if (isset($settings['term_filter'])) {
            if (array_key_exists($vocabulary, $settings['term_filter'])) {
              $filters['term_filter'][$content_type_field['field_name']] = $settings['term_filter'][$vocabulary];
            }
          }

          // Finds the NUTS regions field in the mapeditor_content_type.
          if ($vocabulary == 'nuts_regions') {
            $nuts_regions_field_name = $content_type_field['field_name'];
            $filters['nuts_regions_field'] = $nuts_regions_field_name;
          }
          break;

        case 'geofield':

          // Finds the geofield in the mapeditor_content_type.
          $geofield_name = $content_type_field['field_name'];
          $filters['geofield'] = $geofield_name;
          break;
      }
    }

    // Builds map with NUTS data from nodes.
    if ($settings['data_type'] == 'nuts') {

      // Sets the column for the fieldcondition in the EntityFieldQuery.
      // @todo: find a proper way to fix this.
      $filters['nuts_regions_field_column'] = 'tid';

      // Fetches the content for the map.
      $map_items = _mapeditor_fetch_nodes($filters);
      if ($map_items) {

        // Prepares data for build.
        $mapeditor_data = new MapeditorMapData();
        $mapeditor_data->setNutsRegionsFieldName($nuts_regions_field_name);
        $mapeditor_data->setNuts($map_items, $settings['source_data']);
        $nuts = $mapeditor_data->getNuts();

        // Builds the map.
        $mapeditor_map = new MapeditorMapBuild($map, $settings);
        $mapeditor_map->setCustomJs('nuts.js');
        $mapeditor_map->setNuts($nuts);
        return $mapeditor_map->build;
      }
    }

    // Builds map with geofield data from nodes.
    elseif ($settings['data_type'] == 'geofield') {
      $features = array();
      $all_coordinates = array();

      // Sets the column for the fieldcondition in the EntityFieldQuery.
      // @todo: find a proper way to fix this.
      $filters['geofield_column'] = 'lat';

      // Fetches the content for the map.
      $map_items = _mapeditor_fetch_nodes($filters);
      if ($map_items) {
        foreach ($map_items as $map_item) {
          $wr_map_item = entity_metadata_wrapper('node', $map_item);

          // Checks if geofield contains points (not other types are
          // possible atm) and populates the geojson feature.
          if (_mapeditor_fieldcheck($geofield_name, $wr_map_item) && $wr_map_item->$geofield_name->geo_type->value() == 'point') {

            // @TODO figure neat way to render popup
            $entity_view = entity_view('node', array($map_item), 'popup');

            // @todo: make configurabe the geofield.
            $features[] = array(
              'type' => 'Feature',
              'properties' => array(
                'name' => $wr_map_item->title->value(),
                'popupContent' => drupal_render($entity_view),
              ),
              'geometry' => array(
                'type' => _mapeditor_geojson_type($wr_map_item->$geofield_name->geo_type->value()),
                'coordinates' => array(
                  // Sets coordinates in GeoJSON standard: X,Y (lon, lat).
                  round($wr_map_item->$geofield_name->lon->value(), 4),
                  round($wr_map_item->$geofield_name->lat->value(), 4),
                ),
              ),
            );
            // Collects all coordinates (lat, lon) for the fitBounds method.
            $all_coordinates[] = array(
              round($wr_map_item->$geofield_name->lat->value(), 4),
              round($wr_map_item->$geofield_name->lon->value(), 4),
            );
          }
        }
        $settings['all_coordinates'] = $all_coordinates;

        // Builds the map.
        $mapeditor_map = new MapeditorMapBuild($map, $settings);
        $mapeditor_map->setCustomJs('map.js');
        $mapeditor_map->setFeatures($features);
        return $mapeditor_map->build;
      }
      else {
        drupal_set_message('Not enough information to build map.', 'error');
      }

    }
  }
}

/**
 * Fetches map definition from mapeditor map node.
 */
function _mapeditor_map_definition($wrnode) {

  // Fetches map default definition and settings.
  $map_defaults = _mapeditor_map_defaults();
  $map = $map_defaults['map'];
  $settings = $map_defaults['settings'];

  if (_mapeditor_fieldcheck('mapeditor_map_definition', $wrnode)) {
    $map_definition = $wrnode->mapeditor_map_definition->value();
    $map_definition = drupal_json_decode($map_definition);
  }

  if ($map_definition) {

    // Groups settings in 'map' in order to pass directly to JavaScript.
    $map['map'] = $map_definition['tile_layer']['tile_layer'];
    $map['zoom'] = $map_definition['zoom']['initialZoom'];
    $map['maxZoom'] = $map_definition['zoom']['maxZoom'];
    $map['minZoom'] = $map_definition['zoom']['minZoom'];
    $map['attributionControl'] = $map_definition['attribution']['attributionControl'];
    $map['attribution'] = $map_definition['attribution']['attribution'];
    $map['center'] = array(
      $map_definition['center']['lat'],
      $map_definition['center']['lon'],
    );

    // Groups settings in 'settings' in order to be used both by Drupal and
    // JavaScript.
    $settings['height'] = $map_definition['height']['height'];
    $settings['icon'] = $map_definition['icon']['icon'];
    $settings['popup'] = $map_definition['popup']['popin'];
    $settings['show_popup'] = $map_definition['popup']['show'];
    $settings['source_data'] = $map_definition['source_data'];
    $settings['data_type'] = $map_definition['data_type'];
    $settings['show_map_definition'] = $map_definition['show_map_definition'];
    $settings['mapeditor_content_type'] = $map_definition['mapeditor_content_type'];
    if (isset($map_definition['term_filter'])) {
      $settings['term_filter'] = $map_definition['term_filter'];
    }
  }
  return array(
    'map' => $map,
    'settings' => $settings,
  );
}

/**
 * Inspects wrapped entities & fields.
 */
function _mapeditor_wrapper_inspect($w) {
  $values = array();
  foreach ($w->getPropertyInfo() as $key => $val) {
    $values[$key] = $w->$key->value();
  }
  return $values;
}

/**
 * Checks if wrapped entity fields have a value.
 */
function _mapeditor_fieldcheck($field, $wrentity) {
  if ($wrentity->__isset($field)) {
    $fieldvalue = $wrentity->$field->value();
    if (!empty($fieldvalue)) {
      return TRUE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Fetches nodes.
 */
function _mapeditor_fetch_nodes($filters) {
  if ($filters['bundle']) {
    $nodes = array();
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $filters['bundle']);

    // Checks for missing coordinates.
    if (isset($filters['geofield_column'])) {
      $query->fieldCondition($filters['geofield'], $filters['geofield_column'], 'NULL', '!=');
    }

    // Checks for missing coordinates.
    if (isset($filters['nuts_regions_field_column'])) {
      $query->fieldCondition($filters['nuts_regions_field'], 'tid', 'NULL', '!=');
    }

    // Allows including unpublished nodes in the result.
    if (variable_get('mapeditor_show_unpublished') == TRUE) {
      $query->propertyCondition('status', array(0, 1), 'in');
    }
    else {
      $query->propertyCondition('status', 1);

    }

    // Applies taxonomy terms filters.
    if (isset($filters['term_filter'])) {
      foreach ($filters['term_filter'] as $term_filter => $tids) {
        $query->fieldCondition($term_filter, 'tid', $tids, 'in');
      }
    }
    $result = $query->execute();
    if (isset($result['node'])) {
      $nids = array_keys($result['node']);
      $nodes = entity_load('node', $nids);
    }
    return $nodes;
  }
  else {
    drupal_set_message('Not enough information to build map.', 'error');
  }
}

/**
 * Provides zoom options.
 */
function _mapeditor_zoom_options() {
  $zoom_options = array(
    -1 => t('Use map defined setting'),
    0 => t('0 - Low/Far'),
    18 => t('18 - High/Close'),
  );
  for ($i = 1; $i < 18; $i++) {
    $zoom_options[$i] = $i;
  }
  ksort($zoom_options);
  return $zoom_options;
}

/**
 * Validate zoom values.
 */
function _mapeditor_validate_zoom($form, &$form_state) {

  $initial_zoom = isset($form_state['values']['initial_zoom'][LANGUAGE_NONE]) ? $form_state['values']['initial_zoom'][LANGUAGE_NONE][0]['value'] : NULL;

  $max_zoom = isset($form_state['values']['max_zoom'][LANGUAGE_NONE]) ? $form_state['values']['max_zoom'][LANGUAGE_NONE][0]['value'] : NULL;

  $min_zoom = isset($form_state['values']['min_zoom'][LANGUAGE_NONE]) ? $form_state['values']['min_zoom'][LANGUAGE_NONE][0]['value'] : NULL;

  if (isset($max_zoom) && $max_zoom != "-1" && isset($min_zoom)) {
    if ($max_zoom > $min_zoom) {
      form_error($element, t('The minimum zoom setting must be less than or equal to the maximum zoom setting'));
    }
  }
}

/**
 * Translates geofield types to geojson types.
 */
function _mapeditor_geojson_type($type) {
  switch ($type) {
    case 'point':
      $type = 'Point';
      break;
  }
  return $type;
}

/**
 * Sets feature set api version.
 *
 * @return array
 *   version number
 */
function mapeditor_feature_set_api() {
  return array('version' => '1.0');
}

/**
 * Defines default map settings.
 */
function _mapeditor_map_defaults() {
  return array(
    'map' => array(
      'center' => array(55.1055, 28.1530),
      'map' => 'osmec',
      'minZoom' => 2,
      'maxZoom' => 10,
      'dragging' => TRUE,
      'touchZoom' => TRUE,
      'scrollWheelZoom' => TRUE,
      'attributionControl' => TRUE,
      'zoom' => 3,

    ),
    'settings' => array(
      'height' => 430,
      'icon' => 'blue',
      'popup' => '',
      'show_popup' => TRUE,
      'popin' => FALSE,
      'source_data' => 'entities',
    ),
  );
}

/**
 * Defines default map settings.
 */
function _mapeditor_form_value_defaults() {
  $map_defaults = _mapeditor_map_defaults();
  $map = $map_defaults['map'];
  $settings = $map_defaults['settings'];

  // Sets default map definitions for new node.
  $map_definition = array(
    'popup' => array(
      'show' => $settings['show_popup'],
      'popin' => $settings['popin'],
    ),
    'icon' => array(
      'icon' => $settings['icon'],
    ),
    'tile_layer' => array(
      'tile_layer' => $map['map'],
    ),
    'height' => array(
      'height' => $settings['height'],
    ),
    'zoom' => array(
      'initialZoom' => $map['zoom'],
      'minZoom' => $map['minZoom'],
      'maxZoom' => $map['maxZoom'],
    ),
    'source_data' => $settings['source_data'],
  );
  return $map_definition;
}

/**
 * Provides available tiles.
 *
 * Populate the tiles field in the map node type.
 */
function _mapeditor_tiles() {
  return array(
    'osmec' => 'Open Street Map customised for European Commission',
    'graybg' => 'Gray background with country outlines',
    'coast' => 'Gray background with continent outlines',
    'gray' => 'Gray shaded relief of earth',
    'hypso' => 'Climate shaded relief of earth',
    'natural' => 'Landcover shaded relief of earth',
    'bmarble' => 'Satellite  images of earth',
    'copernicus003' => 'Copernicus Core003 mosaic',
  );
}

/**
 * Provides icon colors.
 *
 * Populates the icon field in the map node type.
 */
function _mapeditor_icons() {
  return array(
    'black' => 'Black',
    'blue' => 'Blue',
    'green' => 'Green',
    'grey' => 'Grey',
    'orange' => 'Orange',
    'purple' => 'Purple',
    'red' => 'Red',
    'turquoise' => 'Turquoise',
  );
}

/**
 * Validates the height form element.
 */
function _mapeditor_validate_height(&$form, &$form_state) {
  if (!is_numeric($form_state['values']['height']) || $form_state['values']['height'] < 0) {
    form_error($form['height'], t('Map height needs to be a positive number'));
  }
}

/**
 * Converts a geofield into an array of map points.
 */
function _mapeditor_process_geofield($items = array()) {
  $data = array();

  // geophp_load();
  // @todo: check what this does.
  foreach ($items as $delta => $item) {
    $datum = array('type' => $item['geo_type']);
    switch ($item['geo_type']) {
      case 'point':
        $datum += array(
          'lat' => (float) $item['lat'],
          'lon' => (float) $item['lon'],
          'gj_type' => 'Point',
        );
        $data[] = $datum;
        break;
    }
  }
  return $data;
}

/**
 * Populates a list of terms for use in a form api select.
 */
function _mapeditor_get_taxonomy_term_options($machine_name) {
  $options = array();
  $vid = taxonomy_vocabulary_machine_name_load($machine_name)->vid;
  $options_source = taxonomy_get_tree($vid);
  foreach ($options_source as $item) {
    $key = $item->tid;
    $value = $item->name;
    $options[$key] = $value;
  }
  return $options;
}

/**
 * Provides defaults for lat and lon center field.
 */
function _mapeditor_default_center() {
  if (module_exists('ec_geocoder')) {
    $locality = $_GET['locality'];

    // Prepares call to geocoder service.
    $data = array(
      'request' => 'GetGeocoding',
      'outputFormat' => 'json',
      'minquality' => 0,
      'nbaddresses' => '1',
      'addresses_0' => $locality,
    );
    $url = url(variable_get('ec_geocoder_url', EC_GEOCODER_URL), array('query' => $data));

    // Fetches result from geocoder service.
    $result = drupal_http_request($url);
    if ($result->data) {
      $data = $result->data;
      $data = $result = substr($data, 1, -1);
      $data = drupal_json_decode($data);
      if (isset($data['features'][0]['geometry'])) {
        $coordinates = $data['features'][0]['geometry']['coordinates'];
        $lat = $coordinates[1];
        $lon = $coordinates[0];
        $commands[] = ajax_command_invoke("input[id^='edit-lat']", 'val', array($lat));
        $commands[] = ajax_command_invoke("input[id^='edit-lon']", 'val', array($lon));
        $page = array('#type' => 'ajax', '#commands' => $commands);
        ajax_deliver($page);
      }
    }
  }
}
