<?php

/**
 * @file
 * Tests NUTS regions tools modules.
 */

/**
 * Performs test on the mapeditor module.
 *
 * @todo improve to test more.
 */
class MapeditorTestCase extends MapeditorDrupalWebTestCase {

  // $adminUser is a user with permission to administer blocks.
  protected $adminUser;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Mapeditor: content type',
      'description' => 'Test the Mapeditor content type',
      'group' => 'Mapeditor',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp(array(
      'mapeditor',
      'mapmock',
    ));

    // Disables apachesolr search to prevent time outs locally.
    module_disable(array('apachesolr_search'), TRUE);

    variable_set('mapeditor_node_types', array('den' => 'den'));
    variable_set('mapeditor_vocabularies', array('topics' => 'topics'));

    $this->adminUser = $this->drupalCreateUser(
      array(
        'access content',
        'administer users',
        'administer site configuration',
        'administer nodes',
        'administer content types',
        'create mapeditor_map content',
      )
    );
  }

  /**
   * Test node access permissions.
   */
  protected function testContentTypesAvailability() {
    $this->drupalLogin($this->adminUser);
    $this->drupalGet("admin/structure/types");
    $this->assertText('The map type allows creating a map in simple steps.', 'Map type description found on the types admin page.');
    $this->drupalGet('admin/structure/types/manage/mapeditor-map');
    $this->assertResponse(200, 'Content type Mapeditor Map is available');
    $this->drupalLogout();
  }

  /**
   * Tests the availability of (some) fields in the map node form.
   */
  public function testMapeditorNode() {
    $this->drupalLogin($this->adminUser);

    // Checks is Mapedit map node form is OK.
    $this->drupalGet("node/add/mapeditor-map");
    $this->assertResponse(200, 'Node form Mapeditor Map is available');
    $this->assertField('title_field[und][0][value]', 'Title field is available');
    $this->assertField('edit-initialzoom', 'Initial zoom field is available');
    $this->assertField('edit-minzoom', 'Min zoom field is available');
    $this->assertField('edit-maxzoom', 'Max zoom field is available');
    $this->assertField('show', 'Show pop-up field is available');
    $this->assertField('edit-popin', 'Pop-in field is available');
    $this->assertField('lat', 'Center lat field is available');
    $this->assertField('edit-lon', 'Center lon field is available');
    $this->assertField('height', 'Height field is available');
    $this->assertField('tile_layer', 'Tile layer field is available');
    $this->assertField('attribution', 'Attribution field is available');

    // Creates a Mapeditor node.
    $edit = array(
      'title_field[und][0][value]' => 'Test map',
      'height' => '800',
      'lat' => '100',
      'lon' => '33',
      'mapeditor_content_type' => "den",
      'source_data' => 'csv',
      'data_type' => 'geofield',
    );
    $this->drupalPost('node/add/mapeditor-map', $edit, 'Save');
    $this->assertText('Map (by mapeditor) Test map has been created.');
    // Checks for the common error message when the data is insufficient
    // to build a map.
    $this->assertText('Not enough information to build map', 'Error message for missing data found');

    // Logs out.
    $this->drupalLogout();
  }

  /**
   * Tests the availability of (some) fields in the map node form.
   */
  public function testMapeditorConfigForm() {
    $this->drupalLogin($this->adminUser);

    // Checks is Mapeditor map node form is OK.
    $this->drupalGet("admin/config/system/mapeditor/settings");
    $this->assertResponse(200, 'Mapeditor config form  is available');
    $this->assertField('webtools_environment', 'Webtools environment field is available');
    $this->assertText('Mapeditor data', 'mapeditor data fieldset is available');
    $this->assertField('mapeditor_node_types[den]', 'Pirate den checkbox is available');
    $this->assertField('mapeditor_show_unpublished', 'Show unpublished field is available');

    $edit['webtools_environment'] = 'https://europa.eu/webtools/load.js';
    $edit['mapeditor_show_unpublished'] = 1;
    $this->drupalPost('admin/config/system/mapeditor/settings', $edit, 'Save configuration');
    $this->assertText('The configuration options have been saved', 'Succesful confirmation message is found');

    // Logs out.
    $this->drupalLogout();
  }

  /**
   * Tests the availability of the corporate JavaScript libraries.
   *
   * These are often not available due to IP, domain name and other
   * restrictions.
   */
  public function testMapeditorJavaScriptLibraries() {

    // Checks the load.js main JavaScript.
    $load_url = variable_get('webtools_environment', MAPEDITOR_WEBTOOLS_ENVIRONMENT);
    $this->drupalGet($load_url);
    $this->assertText('europa.eu/webtools');
    $this->assertNoText('Access Denied', "Access denied message is not found");
  }

  /**
   * Tests the availability of the mapeditor example pages.
   */
  public function testMapeditorExamplePages() {
    $this->drupalGet('mapeditor/example');
    $this->assertResponse(200, 'Mapeditor example page is available');
    $this->assertText('Example Page', 'Example page title found');
    $this->assertResponse(200, 'Mapeditor more example page is available');
    $this->drupalGet('mapeditor/example/more');
    $this->assertText('Example Page', 'More example page title found');
    $this->assertResponse(200, 'Mapeditor NUTS example page is available');
    $this->drupalGet('mapeditor/example/nuts');
    $this->assertText('NUTS example Page', 'NUTS example page title found');
  }

}
